#!/bin/bash
# -*- sh -*-

: << =cut

=pod

=encoding UTF-8

=head1 NAME

cake_tin_delay_ - Plugin to monitor cake's average tin delay 

=head1 CONFIGURATION

None needed.

=head1 INTERPRETATION

Cake, also known as sch_cake is a modern bandwidth limiter, which eliminates
buffer bloat over slow links. It's also capable to give flows, hosts and each 
flow of each host a fair part of the avaible bandwidth.

This plugin allows for a monitoring packet delays per tins on the qdisc.

=head1 SEE ALSO

Take a look at "man cake" to get more information about cake.

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf suggest

=head1 AUTHORS

RubenKelevra <ruben@vfn-nrw.de>

work based on the tc plugin, authors:
Steve Schnepp <steve.schnepp@gmail.com>,
Samuel Smith <esaym@cpan.org>,
Nye Liu <nyet@nyet.org>

=head1 LICENSE

GPLv2 or later

=cut

DEVICE=${0##*/cake_tin_delay_}

tc_cake_get_diffserv() {
    /sbin/tc -s qdisc show dev "$DEVICE" | head -n1 | grep -i "diffserv3" > /dev/null
    if [ $? -eq 0 ]; then
        echo 3
    fi
    /sbin/tc -s qdisc show dev "$DEVICE" | head -n1 | grep -i "diffserv4" > /dev/null
    if [ $? -eq 0 ]; then
        echo 4
    fi
    /sbin/tc -s qdisc show dev "$DEVICE" | head -n1 | grep -i "diffserv8" > /dev/null
    if [ $? -eq 0 ]; then
        echo 8
    fi
    return 0
}

convert_time() {
    #converts us, ms, s into s without a unit
    echo $1 | awk '{
        time = $1;
        sub(/[a-z]+$/, "", time);
        unit = $1;
        sub(/^[^a-z]+/, "", unit);

        if (unit == "ns") {
            time /= 1000000000;
        } else if (unit == "us") {
            time /= 1000000;
        } else if (unit == "ms") {
            time /= 1000;
        } else if (unit == "s") {
            time = time;
        } else if (unit == "m") {
            time *= 60;
        } else if (unit == "h") {
            time *= 3600;
        } else if (unit == "d") {
            time *= 86400;
        }
        printf("%.9f\n", time)
    }'
}

tc_cake_get_delays() {
    delays="$(/sbin/tc -s qdisc show dev "$DEVICE" | grep "^  av_delay" | sed -e 's/av_delay//')"
    for e in ${delays[@]}; do
        delay="$(convert_time $e)"
        echo -en " $delay "
    done
    echo ""
}

case "$1" in
    autoconf)
    if [ -r /proc/net/dev ]; then
        echo yes
        exit 0
    else
        echo "no (/proc/net/dev not found)"
        exit 1
    fi
    ;;
    suggest)
    if [ -r /proc/net/dev ]; then
        ifs="$(awk '
                /^ *(eth|tap|bond|wlan|ath|ra|sw|eno|ens|enp|wlp|wl)[0-9]*/ {
                   split($0, a, /: */);
                   gsub(/^ +/,"",a[1]);
                   if (($2 > 0) || ($10 > 0)) print a[1]; }' /proc/net/dev)"
        cake_ifs=()
        for if in $ifs; do
            qdisc="$(/sbin/tc -s qdisc show dev "$if" | head -n1 | awk '{ print $2 }')"
            if [ "$qdisc" == "cake" ]; then
                cake_ifs+=("$if")
            fi
        done
        echo "$cake_ifs"
    fi
    exit 0
    ;;
    config)
    
    echo "graph_title $DEVICE cake QoS tin's delay stats"
    echo 'graph_args --base 1000'
    echo 'graph_vlabel seconds'
    echo 'graph_category network'
    echo "graph_info This graph shows the average latency of egress traffic per tin of the $DEVICE network interface."
    
    diffserv_no="$(tc_cake_get_diffserv)"
    
    if [ "$diffserv_no" == "3" ]; then

        echo "bulk.label Bulk"
        echo "bulk.type GAUGE"
        echo "bulk.min 0"
        echo "bulk.info avg delay for bulk packets thru cake"
        
        echo "besteffort.label Best Effort"
        echo "besteffort.type GAUGE"
        echo "besteffort.min 0"
        echo "besteffort.info avg delay for best effort packets thru cake"
        
        echo "voice.label Voice"
        echo "voice.type GAUGE"
        echo "voice.min 0"
        echo "voice.info avg delay for Voice packets thru cake"
        
        exit 0
    fi
    
    if [ "$diffserv_no" == "4" ]; then
        
        echo "bulk.label Bulk"
        echo "bulk.type GAUGE"
        echo "bulk.min 0"
        echo "bulk.info avg delay for bulk packets thru cake"
        
        echo "besteffort.label Best Effort"
        echo "besteffort.type GAUGE"
        echo "besteffort.min 0"
        echo "besteffort.info avg delay for best effort packets thru cake"
        
        echo "video.label Video"
        echo "video.type GAUGE"
        echo "video.min 0"
        echo "video.info avg delay for Video packets thru cake"
        
        echo "voice.label Voice"
        echo "voice.type GAUGE"
        echo "voice.min 0"
        echo "voice.info avg delay for Voice packets thru cake"
        
        exit 0
    fi
    
    if [ "$diffserv_no" == "8" ]; then
        
        echo "tin1.label Tin 1"
        echo "tin1.type GAUGE"
        echo "tin1.min 0"
        echo "tin1.info avg delay for Tin 1 packets thru cake"
        
        for i in `seq 2 8`; do
            echo "tin${i}.label Tin $i"
            echo "tin${i}.type GAUGE"
            echo "tin${i}.min 0"
            echo "tin${i}.info avg delay for Tin $i packets thru cake"
        done
        
        exit 0  
    fi
    
    echo "cake_tin: no diffserv set (besteffort?)" >&2
    echo 1
    
    ;;
esac


diffserv_no="$(tc_cake_get_diffserv)"

if [ "$diffserv_no" == "3" ]; then
    tc_cake_get_delays | awk '{
    print "bulk.value " $1
    print "besteffort.value " $2
    print "voice.value " $3
    }'
    exit 0
fi
if [ "$diffserv_no" == "4" ]; then
    tc_cake_get_delays | awk '{
    print "bulk.value " $1
    print "besteffort.value " $2
    print "video.value " $3
    print "voice.value " $4
    }'
    exit 0
fi
if [ "$diffserv_no" == "8" ]; then
    tc_cake_get_delays | awk '{
    print "tin1.value " $1
    print "tin2.value " $2
    print "tin3.value " $3
    print "tin4.value " $4
    print "tin5.value " $5
    print "tin6.value " $6
    print "tin7.value " $7
    print "tin8.value " $8
    }'
    exit 0
fi


exit 1

 
 
 
 
 
